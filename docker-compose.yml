version: '3.8'

services:
  # ---------------------
  # Frontend service
  # ---------------------
  frontend:
    build: frontend/.
    image: lobbymap-frontend:latest
    depends_on:
      # - feedback_api
      - rag_api
      - pdf_server
      - docling_api
    ports:
      - "8501:8501"
    
    volumes:
      - ./config.yaml:/app/config.yaml
      - ./data/documents:/app/data/documents
    networks:
      - app_network

  # ---------------------
  # Ngnix service
  # ---------------------

  # nginx:
  #   image: nginx:latest
  #   container_name: nginx
  #   # restart: always
  #   depends_on:
  #     - frontend
  #     - feedback_api
  #     - rag_api
  #     - docling_api
  #     - pdf_server
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/conf.d:/etc/nginx/conf.d
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     # - ./certs:/etc/letsencrypt
  #     - ./nginx/.htpasswd:/etc/nginx/.htpasswd
  #   networks:
  #     - app_network

  # ---------------------
  # PDF HTTP Server (Serves the PDFs)
  # ---------------------
  pdf_server:
    image: python:3.12-slim 
    container_name: pdf_server
    working_dir: /app/data/documents
    volumes:
      - ./data/documents:/app/data/documents
    command: python -m http.server 8002
    ports:
      - "8002:8002"
    networks:
      - app_network
    restart: unless-stopped

  # ---------------------
  # Feedback FastAPI service
  # ---------------------
  # feedback_api:
  #   build: feedback-tool/.
  #   image: lobbymap-feedback-api:latest
  #   ports:
  #     - "8000:8000"
  #   depends_on:
  #     - mongodb
  #   environment:
  #     MONGODB_URI: mongodb://lobbymap:lobbymap_pass@mongodb/feedback_db?retryWrites=true&w=majority
  #   networks:
  #     - app_network

  # ---------------------
  # Docling FastAPI service
  # ---------------------
  docling_api:
    build: docling-parser/.
    image: lobbymap-docling-api:latest
    volumes:
      - ./data/documents:/app/data/documents
      - ./config.yaml:/app/config.yaml
    ports:
      - "8888:8888"
    restart: on-failure:0
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: all
    #           capabilities: [ "gpu" ]
    networks:
      - app_network


  # ---------------------
  # MongoDB service
  # ---------------------
  # mongodb:
  #   image: mongo:7
  #   environment:
  #     - MONGO_DATA_DIR=/data/db
  #     - MONGO_LOG_DIR=/dev/null
  #     - MONGO_INITDB_ROOT_USERNAME=admin
  #     - MONGO_INITDB_ROOT_PASSWORD=secret
  #     - MONGO_INITDB_USERNAME=lobbymap
  #     - MONGO_INITDB_PASSWORD=lobbymap_pass
  #     - MONGO_INITDB_DATABASE=feedback_db
  #   entrypoint: |
  #     sh -c "
  #     echo 'Generating default database & user...'
  #     mkdir -p /docker-entrypoint-initdb.d
    
  #     cat > /docker-entrypoint-initdb.d/mongo-init.js <<EOF
  #     var rootUser = \"$${MONGO_INITDB_ROOT_USERNAME}\";
  #     var rootPassword = \"$${MONGO_INITDB_ROOT_PASSWORD}\";
  #     var admin = db.getSiblingDB('admin');
  #     admin.auth(rootUser, rootPassword);
    
  #     // Use single quotes inside JS
  #     var feedbackDB = db.getSiblingDB('feedback_db');
  #     feedbackDB.createUser({
  #       user: 'lobbymap',
  #       pwd: 'lobbymap_pass',
  #       roles: [ { role: 'readWrite', db: 'feedback_db' } ]
  #     });
  #     EOF
    
  #     docker-entrypoint.sh mongod
  #     "
  #   ports:
  #     - '27017:27017'
  #   volumes:
  #     - ./data/mongodb-data:/data/db
  #   networks:
  #     - app_network

  # ---------------------
  # RAG API service
  # ---------------------
  rag_api:
    build:
      context: rag/.
      dockerfile: Dockerfile
    image: lobbymap-rag-api:latest
    ports:
      - "8001:8001"
    depends_on:
      - weaviate
      - ollama
    volumes:
      - ./config.yaml:/app/config.yaml
      - ./data/documents:/app/data/documents
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: all
    #           capabilities: [ "gpu" ]
    networks:
      - app_network

  # ---------------------
  # Weaviate service
  # ---------------------
  weaviate:
    extra_hosts:
      - "host.docker.internal:host-gateway"
    command:
      - --host
      - 0.0.0.0
      - --port
      - '8080'
      - --scheme
      - http
    image: cr.weaviate.io/semitechnologies/weaviate:1.27.0
    ports:
      - "8080:8080"
      - "50051:50051"
    volumes:
      - ./data/weaviate_data:/var/lib/weaviate
    restart: on-failure:0
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      OLLAMA_ENDPOINT: 'http://ollama:11434'
      DEFAULT_VECTORIZER_MODULE: 'text2vec-ollama'
      ENABLE_MODULES: 'text2vec-ollama'
      CLUSTER_HOSTNAME: 'node1'
    networks:
      - app_network

  # ---------------------
  # Ollama service
  # ---------------------
  ollama:
    build:
      context: ollama/.
      dockerfile: Dockerfile
    container_name: ollama
    ports:
      - "11434:11434"
    pull_policy: always
    volumes:
      - ollama_data:/root/.ollama
    tty: true
    restart: unless-stopped
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           capabilities: [ "gpu" ]
    #           count: all
    networks:
      - app_network

# ---------------------
# Define volumes
# ---------------------
volumes:
  ollama_data:

# ---------------------
# Define the shared network
# ---------------------
networks:
  app_network:
    driver: bridge
